colnames(tjdb_data)[colnames(tjdb_data) == "Startyear"] <- "year"
# Now merge the TJDB data with the terrorist_attacks_count dataset
merged_data <- merge(terrorist_attacks_count, tjdb_data,
by.x = c("country_txt", "iyear"),
by.y = c("country", "year"),
all.x = TRUE)
# Check the first few rows of the merged data
head(merged_data)
View(merged_data)
summary(lm(merged_data$num_attacks ~ merged_data$Mtype))
summary(lm(merged_data$num_attacks ~ merged_data$Mtype[merged_data$Mlevel == 1]))
summary(lm(merged_data$num_attacks ~ merged_data$Mtype[merged_data$Mlevel]))
summary(lm(merged_data$num_attacks ~ merged_data$Mtype[merged_data$Mlevel == 1]))
summary(lm(merged_data$num_attacks ~ merged_data$Mtype[merged_data$Mlevel == 9]))
summary(lm(merged_data$num_attacks ~ merged_data$Mtype))
summary(lm(merged_data$num_attacks ~ merged_data$Mtype + merged_data$log_num_attacks))
summary(lm(merged_data$log_num_attacks ~ merged_data$Mtype + merged_data$log_num_attacks))
summary(lm(merged_data$log_num_attacks ~ as.factor(merged_data$Mtype) + merged_data$log_num_attacks))
summary(lm(merged_data$log_num_attacks ~ as.factor(merged_data$Mtype)))
summary(lm(merged_data$num_attacks ~ as.factor(merged_data$Mtype)))
import pandas as pd
reticulate::repl_python()
import pandas as pd
import pandas as pd
pip install pandas
!pip install pandas
import pandas as pd
c
pd
tjet = pd.read_csv("https://raw.githubusercontent.com/ierimalin/CFE---Exam-/main/ierima_exam/raw/tjet_cy.csv")
View(tjet)
print(tjet.head())
print(tjet.columns)
for col in tjet.columns:
print(col)
)\
col
print(tjet.columns)
list(tjet.columns)
list(tjet.columns)
for column in tjet: print(column)
list(tjet.columns))
for column in tjet: print(column))
for column in tjet: print(column))
for column in tjet: print(column)
tjet_clean = tjet["country", "year", "amnesties", "tcs"]
tjet_clean = tjet[["country", "year", "amnesties", "tcs"]}
tjet_clean = tjet[["country", "year", "amnesties", "tcs"]]
View(tjet_clean)
tjet_clean = tjet_clean[tjet_clean["year"] == 2021]
View(tjet_clean)
tjet_clean = tjet[["country", "year", "amnesties", "tcs"]]
View(tjet_clean)
tjet_clean = tjet_clean[tjet_clean["year"] == 2021]
View(tjet_clean)
tjet_clean = tjet[["country", "year", "amnesties", "tcs"]]
tjet_clean_2021 = tjet_clean[tjet_clean["year"] == 2021]
View(tjet_clean_2021)
tjet_clean_2021 = tjet_clean[tjet_clean["year"] == 2021,]
for year in tjet_selected['year'].unique():
if year == 2021:
# Filter for year 2021 and store the result in tjet_filtered
tjet_filtered = tjet_selected[tjet_selected['year'] == year]
break  # Exit the loop once we have the year 2021
else:
# If the loop completes without finding 2021, keep all rows
tjet_filtered = tjet_selected
tjet_clean_2021 = pd.DataFrame()
View(tjet_clean_2021)
tjet_clean_2021 = tjet_clean
View(tjet_clean_2021)
tjet_clean_2021 = tjet_clean[tjet_clean["year"] == 2021]
tjet_clean_2021
tjet_clean_2021 = tjet[tjet["year"] == 2021]
2
View(tjet_clean_2021)
tjet_2021 = tjet[tjet["year"] == 2021]
tjet_clean_2021 = tjet_2021[["country", "year", "amnesties", "tcs"]]
View(tjet_clean_2021)
View(tjet_clean)
View(tjet)
tjet_clean = tjet[["country", "year", "amnesties_sample", "tcs_sample"]]
tjet_clean_2021 = pd.DataFrame()
View(tjet_clean_2021)
for year in tjet_clean["year"].unique():
tjet_clean_2021 = pd.DataFrame()
for year in tjet_clean["year"].unique():
if year == 2021:
tjet_clean_2021 = tjet_clean[tjet_clean["year"] == year]
break
else:
tjet_clean_2021 = tjet_clean
tjet = pd.read_csv("https://raw.githubusercontent.com/ierimalin/CFE---Exam-/main/ierima_exam/raw/tjet_cy.csv")
print(tjet.head())
#show me all the columns (I use this instead of the more simple list(tjet.columns) because it offers each variable on a different row
for column in tjet: print(column)
tjet_clean = tjet[["country", "year", "amnesties_sample", "tcs_sample"]]
tjet_clean_2021 = pd.DataFrame()
for year in tjet_clean["year"].unique():
if year == 2021:
tjet_clean_2021 = tjet_clean[tjet_clean["year"] == year]
break
else:
tjet_clean_2021 = tjet_clean
tjet_clean_2021 = tjet_clean
tjet_clean_2021
View(tjet_clean_2021)
tjet_clean = tjet_clean[tjet_clean["year"] == 2021]
tjet_clean_2021 = pd.DataFrame()
for year in tjet_clean["year"].unique():
tjet_clean_2021 = pd.DataFrame()
for year in tjet_clean["year"].unique():
if year == 2021:
tjet_clean_2021 = tjet_clean[tjet_clean["year"] == year]
break
else:
tjet_clean_2021 = tjet_clean
tjet_clean_2021 = pd.DataFrame()
for year in tjet_clean["year"].unique():
if year == 2021:
tjet_clean_2021 = tjet_clean[tjet_clean["year"] == year]
break
else:
tjet_clean_2021 = tjet_clean
View(tjet_clean_2021)
list_countries = list(tjet_clean_2021["country"].unique())
print(list_countries)
print("This is a list of the included countries", list_countries)
country_count = {}
View(country_count)
else: country_count[country] = 1
country_count = {}
for country in tjet_clean_2021["country"]:
if country in country_count:
country_count[country] +1
else: country_count[country] = 1
country_count[country] =+1
country_count = {}
for country in tjet_clean_2021["country"]:
if country in country_count:
country_count[country] =+1
else: country_count[country] = 1
for country in tjet_clean_2021["country"]:
if country in country_count:
country_count[country] += 1  # Use += to increment the count
else:
country_count[country] = 1  # Initialize the count to 1
# Display the country counts
print("Country Count:")
for country, count in country_count.items():
print(f"{country}: {count}")
for country in tjet_clean_2021["country"]:
if country in country_count:
country_count[country] += 1  # Use += to increment the count
else:
country_count[country] = 1  # Initialize the count to 1
for country in tjet_clean_2021["country"]:
if country in country_count:
country_count[country] += 1
else:
country_count[country] = 1
for country in tjet_clean_2021["country"]:
if country in country_count:
country_count[country] += 1
else:
country_count[country] = 1
country_count = {}
for country in tjet_clean_2021["country"]:
if country in country_count:
country_count[country] += 1
else:
country_count[country] = 1
View(country_count)
View(country_count)
print(country_count)
tjet_clean_2021["has_mechanisms"] = ((tjet_clean_2021["amnesties_sample" == 1 | (tjet_clean_2021["tcs_sample"] == 1)).astype(int)
tjet_clean_2021["has_mechanisms"] = ((tjet_clean_2021["amnesties_sample"] == 1) | (tjet_clean_2021["tcs_sample"] == 1)).astype(int)
tjet_clean_2021["has_mechanisms"] = ((tjet_clean_2021["amnesties_sample"] == 1) | (tjet_clean_2021["tcs_sample"] == 1)).astype(int)
View(tjet_clean_2021)
clean_folder = os.path.join(base_directory, "clean")
tjet_clean_2021.to_csv(os.path.join(clean_folder, "tjet_clean_2021.csv"), index=False)
import os
clean_folder = os.path.join(base_directory, "clean")
tjet_clean_2021.to_csv(os.path.join(clean_folder, "tjet_clean_2021.csv"), index=False)
clean_folder = os.path.join(base_directory, "clean")
tjet_clean_2021.to_csv(os.path.join(clean_folder, "tjet_clean_2021.csv"), index=False)
clean_folder = os.path.join(base_directory, "clean")
clean_folder = os.path.join(base_directory, "clean")
tjet_clean_2021.to_csv(os.path.join(clean_folder, "tjet_clean_2021.csv"), index=False)
clean_folder = os.path.join(base_directory, "clean")
base_directory = "C:\Users\Alin\Documents\GitHub\CFE---Exam-\ierima_exam" #CHANGE THIS TO THE DESIRED PATH!
base_directory = "C:\Users\Alin\Documents\GitHub\CFE---Exam-\ierima_exam"
base_directory = "C:\Users\Alin\Documents\GitHub\CFE---Exam-\ierima_exam"
base_directory = "C:\\Users\\Alin\\Documents\\GitHub\\CFE---Exam-\\ierima_exam"
clean_folder = os.path.join(base_directory, "clean")
tjet_clean_2021.to_csv(os.path.join(clean_folder, "tjet_clean_2021.csv"), index=False)
summary_statistics = tjet_clean_2021.describe()
# Display the summary statistics
print(summary_statistics)
print(tjet_clean_2021.describe())
import matplotlib as plt
!pip install matplotlib
import matplotlib as plt
plt.figure(figsize=(8, 5))
sns.countplot(x='has_mechanisms', data=tjet_clean_2021, palette='pastel')
plt.title('Count of Has Mechanisms (0 and 1)')
plt.xlabel('Has Mechanisms (0 = No, 1 = Yes)')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
plt.figure(figsize=(8, 5))
sns.countplot(x='has_mechanisms', data=tjet_clean_2021, palette='pastel')
plt.title('Count of Has Mechanisms (0 and 1)')
plt.xlabel('Has Mechanisms (0 = No, 1 = Yes)')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
has_mechanisms_counts = tjet_clean_2021['has_mechanisms'].value_counts()
plt.figure(figsize=(8, 5))
has_mechanisms_counts.plot(kind='bar', color=['skyblue', 'salmon'])
plt.title('Count of Has Mechanisms (0 and 1)')
plt.xlabel('Has Mechanisms (0 = No, 1 = Yes)')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
has_mechanisms_counts = tjet_clean_2021['has_mechanisms'].value_counts()
plt.figure(figsize=(8, 5))
has_mechanisms_counts.plot(kind='bar', color=['skyblue', 'salmon'])
plt.title('Count of Has Mechanisms (0 and 1)')
plt.xlabel('Has Mechanisms (0 = No, 1 = Yes)')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
import matplotlib.pyplot as plt
has_mechanisms_counts = tjet_clean_2021['has_mechanisms'].value_counts()
plt.figure(figsize=(8, 5))
has_mechanisms_counts.plot(kind='bar', color=['skyblue', 'salmon'])
plt.title('Count of Has Mechanisms (0 and 1)')
plt.xlabel('Has Mechanisms (0 = No, 1 = Yes)')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
plt.savefig(os.path.join(os.path.join(base_directory, "graphs"), 'TJ mechanisms.png'), bbox_inches='tight')
has_mechanisms_counts.plot(kind='bar', color=['skyblue', 'red'])
plt.figure(figsize=(8, 5))
has_mechanisms_counts.plot(kind='bar', color=['skyblue', 'red'])
plt.title('Count of Has Mechanisms (0 and 1)')
plt.xlabel('Has Mechanisms (0 = No, 1 = Yes)')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
plt.figure(figsize=(8, 5))
has_mechanisms_counts.plot(kind='bar', color=['navy', 'red'])
plt.title('Count of Has Mechanisms (0 and 1)')
plt.xlabel('Has Mechanisms (0 = No, 1 = Yes)')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
plt.figure(figsize=(6, 5))
has_mechanisms_counts.plot(kind='bar', color=['navy', 'red'])
plt.title('Count of Has Mechanisms (0 and 1)')
plt.xlabel('Has Mechanisms (1 = Yes, 0 = No)')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
plt.figure(figsize=(6, 5))
has_mechanisms_counts.plot(kind='bar', color=['navy', 'red'])
plt.title('Count of Has Mechanisms (0 and 1)')
plt.xlabel('Has Mechanisms (1 = Yes, 0 = No)')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
clean
clear
clear()
import gc
import sys
# Clear all variables
for name in dir():
if name != 'gc' and name != 'sys':
del globals()[name]
# Run garbage collection to free up memory
gc.collect()
import builtins
builtins.__dict__.clear()
library(reticulate)
plt.xticks(rotation=0)
reticulate::repl_python()
reticulate::repl_python()
plt.grid(axis='y', linestyle='--', alpha=0.7)
reticulate::source_python('~/GitHub/CFE---Exam-/Exam.py')
reticulate::repl_python()
import os
reticulate::repl_python()
plt.title('Count of Has Mechanisms (0 and 1)')
import os
import pandas as pd
base_directory = "C:\\Users\\Alin\\Documents\\GitHub\\CFE---Exam-\\ierima_exam"
#CHANGE THIS TO THE DESIRED PATH!
#5., 6. and 2. Reading the TJET data in Python and cleaning it, and subsetting/transforming data.
tjet = pd.read_csv("https://raw.githubusercontent.com/ierimalin/CFE---Exam-/main/ierima_exam/raw/tjet_cy.csv")
print(tjet.head())
#show me all the columns (I use this instead of the more simple list(tjet.columns) because it offers each variable on a different row
for column in tjet: print(column)
tjet_clean = tjet[["country", "year", "amnesties_sample", "tcs_sample"]]
tjet_clean = tjet_clean[tjet_clean["year"] == 2021]
#Using for loop again for the sake of exemplifying
tjet_clean_2021 = pd.DataFrame()
for year in tjet_clean["year"].unique():
if year == 2021:
tjet_clean_2021 = tjet_clean[tjet_clean["year"] == year]
break
else:
tjet_clean_2021 = tjet_clean
#Transformation: creating a new variable
tjet_clean_2021["has_mechanisms"] = ((tjet_clean_2021["amnesties_sample"] == 1) | (tjet_clean_2021["tcs_sample"] == 1)).astype(int)
#7. saving cleaned data.
clean_folder = os.path.join(base_directory, "clean")
tjet_clean_2021.to_csv(os.path.join(clean_folder, "tjet_clean_2021.csv"),index=False)
#3. Using lists and dictionaries
#Lists
list_countries = list(tjet_clean_2021["country"].unique())
print("This is a list of the included countries", list_countries)
#Dictionaries. This code creates an empty dictionary, which will be used to store the counts of occurences of each country. Then a loop iterates over each country and counts the occurences. All countries should only appear once.
country_count = {}
for country in tjet_clean_2021["country"]:
if country in country_count:
country_count[country] += 1
else:
country_count[country] = 1
print(country_count)
#8. Creating summary statistics
print(tjet_clean_2021.describe())
#9. Create graph
import matplotlib.pyplot as plt
has_mechanisms_counts = tjet_clean_2021['has_mechanisms'].value_counts()
plt.figure(figsize=(6, 5))
has_mechanisms_counts.plot(kind='bar', color=['navy', 'red'])
plt.title('Count of Has Mechanisms (0 and 1)')
plt.xlabel('Has Mechanisms (1 = Yes, 0 = No)')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
plt.savefig(os.path.join(os.path.join(base_directory, "graphs"), 'TJ mechanisms.png'), bbox_inches='tight')
reticulate::repl_python()
plt.title('How many countries have had Transitional Justice Mechanisms')
import os
import pandas as pd
base_directory = "C:\\Users\\Alin\\Documents\\GitHub\\CFE---Exam-\\ierima_exam"
#CHANGE THIS TO THE DESIRED PATH!
#5., 6. and 2. Reading the TJET data in Python and cleaning it, and subsetting/transforming data.
tjet = pd.read_csv("https://raw.githubusercontent.com/ierimalin/CFE---Exam-/main/ierima_exam/raw/tjet_cy.csv")
print(tjet.head())
#show me all the columns (I use this instead of the more simple list(tjet.columns) because it offers each variable on a different row
for column in tjet: print(column)
tjet_clean = tjet[["country", "year", "amnesties_sample", "tcs_sample"]]
tjet_clean = tjet_clean[tjet_clean["year"] == 2021]
#Using for loop again for the sake of exemplifying
tjet_clean_2021 = pd.DataFrame()
for year in tjet_clean["year"].unique():
if year == 2021:
tjet_clean_2021 = tjet_clean[tjet_clean["year"] == year]
break
else:
tjet_clean_2021 = tjet_clean
#Transformation: creating a new variable
tjet_clean_2021["has_mechanisms"] = ((tjet_clean_2021["amnesties_sample"] == 1) | (tjet_clean_2021["tcs_sample"] == 1)).astype(int)
#7. saving cleaned data.
clean_folder = os.path.join(base_directory, "clean")
tjet_clean_2021.to_csv(os.path.join(clean_folder, "tjet_clean_2021.csv"),index=False)
#3. Using lists and dictionaries
#Lists
list_countries = list(tjet_clean_2021["country"].unique())
print("This is a list of the included countries", list_countries)
#Dictionaries. This code creates an empty dictionary, which will be used to store the counts of occurences of each country. Then a loop iterates over each country and counts the occurences. All countries should only appear once.
country_count = {}
for country in tjet_clean_2021["country"]:
if country in country_count:
country_count[country] += 1
else:
country_count[country] = 1
print(country_count)
#8. Creating summary statistics
print(tjet_clean_2021.describe())
#9. Create graph
import matplotlib.pyplot as plt
has_mechanisms_counts = tjet_clean_2021['has_mechanisms'].value_counts()
plt.figure(figsize=(6, 5))
has_mechanisms_counts.plot(kind='bar', color=['navy', 'red'])
plt.title('How many countries have had Transitional Justice Mechanisms')
plt.xlabel('Has Mechanisms (1 = Yes, 0 = No)')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
plt.savefig(os.path.join(os.path.join(base_directory, "graphs"), 'TJ mechanisms.png'), bbox_inches='tight')
plt.savefig(os.path.join(os.path.join(base_directory, "graphs"), 'TJ mechanisms.png'), bbox_inches='tight')
View(gtd_2021)
library(readxl)
gtd_2021 = read_excel("globalterrorismdb_2021Jan-June_1222dist.xlsx")
gtd_2020 = read_excel("globalterrorismdb_0522dist.xlsx")
library(readr)
tjet <- read_csv("tjet_cy.csv")
#ACO means conflict&postconflict binary. Should I take this, or should i take dco and pco instead, which are during conflict and after conflict separated? for now, i do the former.
#should i just add the binary variables, for example had amnesty - 1, didnt - 0, or should i add counts for the amnesties per country and year of passing for the regression? for now, i do the former
#fair_postautocratic_trials can be a moderator i guess
#legacy_mean	preliminary legacy of violence index (cumulative and discounted average of latent physical integrity data from Fariss, Kenwick, & Reuning)
#uninv	ongoing UN investigation, binary
tjet_clean = tjet |>
select(country,
year,
aco,
amnesties,
amnesties_sample,
tcs,
trials_domestic,
vettings,
tcs_metcriteria,
tcs_operated,
tcs_ctj_binary,
amnesty_peaceagree,
rep_binary,
vet_implemented,
) |>
rename(had_conflict_postconflict = aco)
View(tjet_clean)
View(tjet)
View(tjdb_data)
View(tjdb_data)
View(gtd_2020)
colanmes(gtd_2020)
colnames(gtd_2020)
class(gtd_2020$crit1)
head(gtd_2020$crit1)
nrow(merged_data)
nrow(gtd_clean)
gtd_clean = merged_data |>
select(iyear, imonth, iday, latitude, longitude, crit1, crit2)
library(tidyverse)
gtd_clean = merged_data |>
select(iyear, imonth, iday, latitude, longitude, crit1, crit2)
gtd_clean$date = as.Date(paste(gtd_clean$iyear, gtd_clean$imonth, gtd_clean$iday), format = "%Y %m %d")
gtd_clean = gtd_clean |> filter(!is.na(longitude) & !is.na(date) & crit1 == 1 & crit2 == 1) #the cases of NA longitude are the same with the cases of NA latitude.
merged_data = bind_rows(gtd_2020, gtd_2021)
gtd_clean = merged_data |>
select(iyear, imonth, iday, latitude, longitude, crit1, crit2)
gtd_clean$date = as.Date(paste(gtd_clean$iyear, gtd_clean$imonth, gtd_clean$iday), format = "%Y %m %d")
gtd_clean = gtd_clean |> filter(!is.na(longitude) & !is.na(date) & crit1 == 1 & crit2 == 1) #the cases of NA longitude are the same with the cases of NA latitude.
nrow(merged_data)
write_csv(gtd_clean, "cleaned_gtd_mapping.csv")
View(gtd_clean)
View(gtd_2021)
gtd_clean = merged_data |>
select(iyear, imonth, iday, latitude, longitude, crit1, crit2, nkill, nwound)
gtd_clean$date = as.Date(paste(gtd_clean$iyear, gtd_clean$imonth, gtd_clean$iday), format = "%Y %m %d")
gtd_clean = gtd_clean |> filter(!is.na(longitude) & !is.na(date) & crit1 == 1 & crit2 == 1) |> mutate(weightcasualties = nkill + (nwound / 2)) #the cases of NA longitude are the same with the cases of NA latitude.
write_csv(gtd_clean, "cleaned_gtd_mapping.csv")
head(gtd_clean$weightcasualties)
range(gtd_clean$weightcasualties)
range(gtd_clean$weightcasualties, na.rm=t)
range(gtd_clean$weightcasualties)
range(gtd_clean$weightcasualties)
View(gtd_clean)
count(gtd_clean$weightcasualties)
nrow(gtd_clean$weightcasualties)
nrow(gtd_clean$weightcasualties, na.rm=T)
sum(is.na(gtd_clean$weightcasualties))
sum(!is.na(gtd_clean$weightcasualties))
reticulate::repl_python()
import os
quit
reticulate::source_python('~/GitHub/Romanian-Presidential-Elections-Map2024/scripts/fetch_data.py')
reticulate::source_python('~/GitHub/Romanian-Presidential-Elections-Map2024/scripts/fetch_data.py')
reticulate::repl_python()
import requests
from datetime import datetime
datadir = "data/raw"
csvfile = f"{DATA_DIR}/election_data.csv"
csv_url = "https://prezenta.roaep.ro/parlamentare01122024/data/csv/sicpv/pv_part_cntry_s.csv"
def download_election_data():
try:
response = requests.get(csv_url, timeout = 15)
response.raise_for_status()
with open(csvfile, "wb") as file
file.write(response.content)
print(f"Data fetched; saved to {csvfile}")
except requests.RequestException as e
print(f"Error: {e}")
if __name__ == "__main__":
download_election_data()
import requests
from datetime import datetime
reticulate::py_install("requests")
reticulate::py_install("requests")
reticulate::py_install("requests")
py_install("requests")
exit()
reticulate::py_install("requests")
reticulate::py_install("requests")
reticulate::py_install("requests")
exit()
quit()
